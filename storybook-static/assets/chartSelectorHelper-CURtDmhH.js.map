{"version":3,"file":"chartSelectorHelper-CURtDmhH.js","sources":["../../src/stories/chartSelectorHelper.ts"],"sourcesContent":["// * Autogenerated Stories Helpers *\n\n// Imports\n\nimport { CHART_FAMILY_MEMBERS, type ChartTypeFamily, type ChartType } from '@fizz/paramanifest';\nimport CHART_CATALOG from '../../node_modules/@fizz/chart-data/data/chart_catalog.json' with { type: \"json\" };\nimport { type CatalogListing } from '@fizz/chart-data';\n\n// Constants\n\nconst HIDE_EXTERNAL = true;\n\n// Catalog Processing\n\nfunction checkExternal(listing: CatalogListing): boolean {\n  if (!HIDE_EXTERNAL) {\n    return true;\n  }\n  return !listing.external;\n}\n\nexport function familyCatalogMapMulti(family: ChartTypeFamily, multi: boolean): Record<string, CatalogListing> {\n  const catalog = CHART_CATALOG.filter((listing) => {\n    return CHART_FAMILY_MEMBERS[family].includes(listing.type as ChartType) \n      && listing.multi === multi && checkExternal(listing);\n  });\n  const map = {};\n  for (const listing of catalog) {\n    map[listing.selectorTitle] = listing;\n  }\n  return map;\n}\n\nexport function familyCatalogMap(family: ChartTypeFamily): Record<string, CatalogListing> {\n  const catalog = CHART_CATALOG.filter((listing) => {\n    return CHART_FAMILY_MEMBERS[family].includes(listing.type as ChartType) && checkExternal(listing);\n  });\n  const map = {};\n  for (const listing of catalog) {\n    map[listing.selectorTitle] = listing;\n  }\n  return map;\n}\n\nexport function familyManifestPathsMap(family: ChartTypeFamily, multi?: boolean): Record<string, string> {\n  const catalogMap = multi === undefined\n    ? familyCatalogMap(family)\n    : familyCatalogMapMulti(family, multi);\n  const map = {};\n  for (const selectorTitle in catalogMap) {\n    map[selectorTitle] = catalogMap[selectorTitle].path;\n  }\n  return map;\n}\n\n"],"names":["cov_yntytdr8r","actualCoverage","CHART_FAMILY_MEMBERS","listing","s","external","family","multi","CHART_CATALOG","checkExternal","catalog","map","selectorTitle","catalogMap","familyCatalogMap","familyCatalogMapMulti"],"mappings":"s8iBA4BQ,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAAD,CAxBRA,EAASE,EAUcC,IAAkC,EAAA,CAAA,IAAAH,SAAAA,EAAAG,EAAA,CAAAH,OAAAA,IAAAI,EAAA,CAAA,IACvDJ,MAAoB,CAAA,IAEpBA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IACAA,EAAgB,EAAAK,EAAA,CAAA,IAClB,CAAAF,EAAA,QAEO,CAAwGH,WAAAM,EAAAC,EAAA,CAC7GP,EAAMA,EAAAA,EAAAA,CAAAA,IAA4CA,MAAAA,KAAA,EAAA,EAAA,CAAA,IAAAQ,EAAA,OAAAL,IAAAH,IAAAI,EAAA,CAAA,IACzCJ,EAAAA,EAAAA,EAAAA,CAAAA,IAERA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAE,EAAAI,CAAA,EAAA,SAAAH,EAAA,IAAA,IAAAH,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAG,EAAA,QAAAI,KAAAP,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAS,EAAAN,CAAA,GACD,GAAaH,GAAAA,EAAA,EAAA,EAAA,CAAA,IAAA,IACbA,EAAWG,EAAAA,EAAA,CAAWO,IAASV,UAAAA,KAAAU,EACzBC,EAAQC,EAAAA,EAAAA,CAAAA,IACdD,EAAAR,EAAA,aAAA,EAAAA,EACO,OAAAH,EAAA,EAAA,EAAA,CAAA,IACTW,CAEO,CAAmFX,WAAAM,EAAA,CACxFN,EAAMA,EAAAA,EAAAA,CAAAA,IAA4CA,MAAAA,KAAA,EAAA,EAAA,EAAA,IAAAQ,EAAA,OAAAL,IAAAH,IAAAI,EAAA,CAAA,IACzCJ,YACRA,IAAA,EAAA,CAAA,EAAA,CAAA,IAAAE,EAAAI,CAAA,EAAA,SAAAH,EAAA,IAAA,IAAAH,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAS,EAAAN,CAAA,GACD,GAAaH,GAAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IACbA,EAAWG,EAAAA,EAAA,EAAWO,IAASV,UAAAA,KAAAU,EACzBC,EAAQC,EAAAA,EAAAA,EAAAA,IACdD,EAAAR,EAAA,aAAA,EAAAA,EACO,OAAAH,EAAA,EAAA,EAAA,EAAA,IACTW,CAEO,CAAkGX,WAAAM,EAAAC,EAAA,CACjGP,EAAAa,EAAA,EAAAb,CAAAA,IAGN,MAAMW,GAAAX,EAAA,EAAA,EAAM,EAAC,IAAAO,IAAA,QAAAP,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAc,EAAAR,CAAA,IAAAN,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAAe,EAAAT,EAAAC,CAAA,IAAAP,GAAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IACbA,EAAWY,EAAAA,EAAAA,EAAAA,IAA6BZ,UAAAA,KAAAa,EACtCF,MAAqBE,EAAAA,IACvBF,EAAAC,CAAA,EAAAC,EAAAD,CAAA,EAAA,KACO,OAAAZ,EAAA,EAAA,EAAA,EAAA,IACTW"}